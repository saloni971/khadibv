<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Orders</title>
    <link rel="stylesheet" href="/css/view1.css"> <!-- Linking External CSS -->
</head>
<body>
    <header>
        <h2>View Orders</h2>
    </header>

    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>User Email</th>
                    <th>User Name</th>
                    <th>Address</th>
                    <th>Pincode</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Order Detail ID</th>
                    <th>Product Name</th>
                    <th>Product Quantity</th>
                    <th>Total Amount</th>
                    <th>Payment Method</th>
                    <th>Order Date</th>
                    <th>Order Status</th>
                    <th>Delete Order</th>
                </tr>
            </thead>
            <tbody id="orders-table-body">
                <!-- Orders will be populated here -->
            </tbody>
        </table>
    </div>

    <script>
        async function fetchOrders() {
            try {
                const response = await fetch('/admin/api/orders'); // Fetching from backend
                if (!response.ok) {
                    throw new Error('Failed to fetch orders');
                }
                const data = await response.json();
                populateOrdersTable(data.orders);
            } catch (error) {
                console.error("Error fetching orders:", error);
                alert("Failed to load orders. Please try again later.");
            }
        }

        function populateOrdersTable(orders) {
    const tableBody = document.getElementById('orders-table-body');
    tableBody.innerHTML = ''; // Clear existing rows

    orders.forEach(order => {
        order.cartItems.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${order.orderID}</td>
                <td>${order.userId ? order.userId.email : 'N/A'}</td>
                <td>${order.name}</td>
                <td>${order.address ?? 'N/A'}</td>
                <td>${order.pincode}</td>
                <td>${order.city}</td>
                <td>${order.state}</td>
                <td>${item.productID ? item.productID._id : 'N/A'}</td>
                <td>${item.productID ? item.productID.name : item.name}</td>
                <td>${item.quantity}</td>
                <td>â‚¹${order.totalAmount ?? 'N/A'}</td>
                <td>${order.paymentMethod}</td>
                <td>${new Date(order.orderDate).toLocaleString()}</td>
                <td>
                    <select class="order-status" onchange="updateOrderStatus('${order._id}', this.value)">
                        <option value="Pending" ${order.status === 'Pending' ? 'selected' : ''}>Pending</option>
                        <option value="Shipped" ${order.status === 'Shipped' ? 'selected' : ''}>Shipped</option>
                        <option value="Out for Delivery" ${order.status === 'Out for Delivery' ? 'selected' : ''}>Out for Delivery</option>
                        <option value="Delivered" ${order.status === 'Delivered' ? 'selected' : ''}>Delivered</option>
                        <option value="Cancelled" ${order.status === 'Cancelled' ? 'selected' : ''}>Cancelled</option>
                    </select>
                </td>
                <td><button class="delete-btn" onclick="deleteOrder('${order._id}')">ðŸ—‘ Delete</button></td>
            `;
            tableBody.appendChild(row);
        });
    });
}

async function updateOrderStatus(orderId, newStatus) {
    try {
        const response = await fetch(`/admin/orders/${orderId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ status: newStatus })
        });

        if (!response.ok) {
            throw new Error('Failed to update order status');
        }

        const result = await response.json();
        alert(`Order status updated to ${newStatus}`);
        fetchOrders(); // Refresh the table

        // Notify the user
        sendUserNotification(result.userId, `Your order ${result.orderID} status has been updated to ${newStatus}`);
    } catch (error) {
        console.error("Error updating order status:", error);
        alert("Failed to update order status. Please try again later.");
    }
}

async function sendUserNotification(userId, message) {
    try {
        await fetch('/api/notifications', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ userId, message })
        });
    } catch (error) {
        console.error("Error sending notification:", error);
    }
}


        async function deleteOrder(orderId) {
            if (confirm("Are you sure you want to delete this order?")) {
                try {
                    const response = await fetch(`/admin/orders/${orderId}`, {
                        method: 'DELETE',
                    });
                    if (!response.ok) {
                        throw new Error('Failed to delete order');
                    }
                    alert("Order deleted successfully.");
                    fetchOrders(); // Refresh the table
                } catch (error) {
                    console.error("Error deleting order:", error);
                    alert("Failed to delete order. Please try again later.");
                }
            }
        }

        // Load orders when the page loads
        window.onload = fetchOrders;
    </script>
</body>
</html>
